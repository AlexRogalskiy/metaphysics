// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creates an SDL 1`] = `
"# Autogenerated input type of AddInitialOfferToOrder
input CommerceAddInitialOfferToOrderInput {
  amountCents: Int!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  orderId: ID!
}

# Autogenerated return type of AddInitialOfferToOrder
type CommerceAddInitialOfferToOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# An generic error type for mutations
type CommerceApplicationError {
  # Code of this error
  code: String!

  # What caused the error
  data: String

  # Type of this error
  type: String!
}

# Autogenerated input type of ApproveOrder
input CommerceApproveOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of ApproveOrder
type CommerceApproveOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of BuyerAcceptOffer
input CommerceBuyerAcceptOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of BuyerAcceptOffer
type CommerceBuyerAcceptOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of BuyerCounterOffer
input CommerceBuyerCounterOfferInput {
  amountCents: Int!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of BuyerCounterOffer
type CommerceBuyerCounterOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of BuyerRejectOffer
input CommerceBuyerRejectOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
  rejectReason: CommerceCancelReasonTypeEnum
}

# Autogenerated return type of BuyerRejectOffer
type CommerceBuyerRejectOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

type CommerceBuyOrder implements CommerceOrder {
  buyer: CommerceOrderPartyUnion!
  buyerPhoneNumber: String
  buyerTotalCents: Int
  code: String!
  commissionFeeCents: Int
  commissionRate: Float
  createdAt: CommerceDateTime!
  creditCardId: String
  currencyCode: String!
  displayCommissionRate: String
  id: ID!

  # Item total in cents, for Offer Orders this field reflects current offer
  itemsTotalCents: Int
  lastApprovedAt: CommerceDateTime
  lastSubmittedAt: CommerceDateTime
  lineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): CommerceLineItemConnection
  mode: CommerceOrderModeEnum
  requestedFulfillment: CommerceRequestedFulfillmentUnion
  seller: CommerceOrderPartyUnion!
  sellerTotalCents: Int
  shippingTotalCents: Int
  state: CommerceOrderStateEnum!
  stateExpiresAt: CommerceDateTime
  stateReason: String
  stateUpdatedAt: CommerceDateTime
  taxTotalCents: Int
  totalListPriceCents: Int!
  transactionFeeCents: Int
  updatedAt: CommerceDateTime!
}

enum CommerceCancelReasonTypeEnum {
  # cancelation reason is: buyer_lapsed
  BUYER_LAPSED

  # cancelation reason is: buyer_rejected
  BUYER_REJECTED

  # cancelation reason is: seller_lapsed
  SELLER_LAPSED

  # cancelation reason is: seller_rejected
  SELLER_REJECTED

  # cancelation reason is: seller_rejected_artwork_unavailable
  SELLER_REJECTED_ARTWORK_UNAVAILABLE

  # cancelation reason is: seller_rejected_offer_too_low
  SELLER_REJECTED_OFFER_TOO_LOW

  # cancelation reason is: seller_rejected_other
  SELLER_REJECTED_OTHER

  # cancelation reason is: seller_rejected_shipping_unavailable
  SELLER_REJECTED_SHIPPING_UNAVAILABLE
}

# Autogenerated input type of ConfirmPickup
input CommerceConfirmPickupInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of ConfirmPickup
type CommerceConfirmPickupPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of CreateOfferOrderWithArtwork
input CommerceCreateOfferOrderWithArtworkInput {
  # Artwork Id
  artworkId: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # EditionSet Id
  editionSetId: String

  # When set to false, we will create a new order. Otherwise if current user has
  # pending/submitted orders on same artwork/edition with same quantity, we will return that
  findActiveOrCreate: Boolean = true

  # Number of items in the line item, default is 1
  quantity: Int
}

# Autogenerated return type of CreateOfferOrderWithArtwork
type CommerceCreateOfferOrderWithArtworkPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure. If find_active_or_create is not false, it will
  # return existing pending/submitted order for current user if exists, otherwise
  # it will return newly created order
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of CreateOrderWithArtwork
input CommerceCreateOrderWithArtworkInput {
  # Artwork Id
  artworkId: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # EditionSet Id
  editionSetId: String

  # Number of items in the line item
  quantity: Int
}

# Autogenerated return type of CreateOrderWithArtwork
type CommerceCreateOrderWithArtworkPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

scalar CommerceDate

scalar CommerceDateTime

# Autogenerated input type of FulfillAtOnce
input CommerceFulfillAtOnceInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  fulfillment: CommerceFulfillmentAttributes!
  id: ID!
}

# Autogenerated return type of FulfillAtOnce
type CommerceFulfillAtOncePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# A Fulfillment for an order
type CommerceFulfillment {
  courier: String!
  createdAt: CommerceDateTime!
  estimatedDelivery: CommerceDate
  id: ID!
  notes: String
  trackingId: String
  updatedAt: CommerceDateTime!
}

# Attributes of a Fulfillment
input CommerceFulfillmentAttributes {
  courier: String!
  estimatedDelivery: CommerceDate
  notes: String
  trackingId: String
}

# The connection type for Fulfillment.
type CommerceFulfillmentConnection {
  # A list of edges.
  edges: [CommerceFulfillmentEdge]

  # A list of nodes.
  nodes: [CommerceFulfillment]

  # Information to aid in pagination.
  pageInfo: CommercePageInfo!
}

# An edge in a connection.
type CommerceFulfillmentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: CommerceFulfillment
}

# A Line Item
type CommerceLineItem {
  artworkId: String!
  artworkVersionId: String!
  commissionFeeCents: Int
  createdAt: CommerceDateTime!
  editionSetId: String
  fulfillments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): CommerceFulfillmentConnection
  id: ID!
  listPriceCents: Int!
  order: CommerceOrder!
  priceCents: Int! @deprecated(reason: \\"switch to use listPriceCents\\")
  quantity: Int!
  shippingTotalCents: Int
  updatedAt: CommerceDateTime!
}

# The connection type for LineItem.
type CommerceLineItemConnection {
  # A list of edges.
  edges: [CommerceLineItemEdge]

  # A list of nodes.
  nodes: [CommerceLineItem]

  # Information to aid in pagination.
  pageInfo: CommercePageInfo!
}

# An edge in a connection.
type CommerceLineItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: CommerceLineItem
}

# An Offer
type CommerceOffer {
  amountCents: Int!
  buyerTotalCents: Int
  createdAt: CommerceDateTime!
  creatorId: String!
  from: CommerceOrderPartyUnion!
  fromParticipant: CommerceOrderParticipantEnum
  id: ID!
  order: CommerceOrder!
  respondsTo: CommerceOffer
  shippingTotalCents: Int
  submittedAt: CommerceDateTime
  taxTotalCents: Int
}

# The connection type for Offer.
type CommerceOfferConnection {
  # A list of edges.
  edges: [CommerceOfferEdge]

  # A list of nodes.
  nodes: [CommerceOffer]

  # Information to aid in pagination.
  pageInfo: CommercePageInfo!
}

# An edge in a connection.
type CommerceOfferEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: CommerceOffer
}

type CommerceOfferOrder implements CommerceOrder {
  awaitingResponseFrom: CommerceOrderParticipantEnum
  buyer: CommerceOrderPartyUnion!
  buyerPhoneNumber: String
  buyerTotalCents: Int
  code: String!
  commissionFeeCents: Int
  commissionRate: Float
  createdAt: CommerceDateTime!
  creditCardId: String
  currencyCode: String!
  displayCommissionRate: String
  id: ID!

  # Item total in cents, for Offer Orders this field reflects current offer
  itemsTotalCents: Int
  lastApprovedAt: CommerceDateTime

  # Last submitted offer
  lastOffer: CommerceOffer
  lastSubmittedAt: CommerceDateTime
  lineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): CommerceLineItemConnection
  mode: CommerceOrderModeEnum
  myLastOffer: CommerceOffer
  offers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int
    fromId: String
    fromType: String

    # Returns the last _n_ elements from the list.
    last: Int
  ): CommerceOfferConnection
  requestedFulfillment: CommerceRequestedFulfillmentUnion
  seller: CommerceOrderPartyUnion!
  sellerTotalCents: Int
  shippingTotalCents: Int
  state: CommerceOrderStateEnum!
  stateExpiresAt: CommerceDateTime
  stateReason: String
  stateUpdatedAt: CommerceDateTime
  taxTotalCents: Int
  totalListPriceCents: Int!
  transactionFeeCents: Int
  updatedAt: CommerceDateTime!
}

# Order
interface CommerceOrder {
  buyer: CommerceOrderPartyUnion!
  buyerPhoneNumber: String
  buyerTotalCents: Int
  code: String!
  commissionFeeCents: Int
  commissionRate: Float
  createdAt: CommerceDateTime!
  creditCardId: String
  currencyCode: String!
  displayCommissionRate: String
  id: ID!

  # Item total in cents, for Offer Orders this field reflects current offer
  itemsTotalCents: Int
  lastApprovedAt: CommerceDateTime
  lastSubmittedAt: CommerceDateTime
  lineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): CommerceLineItemConnection
  mode: CommerceOrderModeEnum
  requestedFulfillment: CommerceRequestedFulfillmentUnion
  seller: CommerceOrderPartyUnion!
  sellerTotalCents: Int
  shippingTotalCents: Int
  state: CommerceOrderStateEnum!
  stateExpiresAt: CommerceDateTime
  stateReason: String
  stateUpdatedAt: CommerceDateTime
  taxTotalCents: Int
  totalListPriceCents: Int!
  transactionFeeCents: Int
  updatedAt: CommerceDateTime!
}

# Fields to sort by
enum CommerceOrderConnectionSortEnum {
  # Sort by the timestamp the state of the order expires at in ascending order
  STATE_EXPIRES_AT_ASC

  # Sort by the timestamp the state of the order expires at in descending order
  STATE_EXPIRES_AT_DESC

  # Sort by the timestamp the state of order was last updated in ascending order
  STATE_UPDATED_AT_ASC

  # Sort by the timestamp the state of order was last updated in descending order
  STATE_UPDATED_AT_DESC

  # Sort by the timestamp the order was last updated in ascending order
  UPDATED_AT_ASC

  # Sort by the timestamp the order was last updated in descending order
  UPDATED_AT_DESC
}

# The connection type for Order.
type CommerceOrderConnectionWithTotalCount {
  # A list of edges.
  edges: [CommerceOrderEdge]

  # A list of nodes.
  nodes: [CommerceOrder]
  pageCursors: CommercePageCursors

  # Information to aid in pagination.
  pageInfo: CommercePageInfo!
  totalCount: Int
  totalPages: Int
}

# An edge in a connection.
type CommerceOrderEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: CommerceOrder
}

enum CommerceOrderFulfillmentTypeEnum {
  # fulfillment type is: pickup
  PICKUP

  # fulfillment type is: ship
  SHIP
}

enum CommerceOrderModeEnum {
  # Buy Order
  BUY

  # Offer Order
  OFFER
}

# Represents either a resolved Order or a potential failure
union CommerceOrderOrFailureUnion = CommerceOrderWithMutationFailure | CommerceOrderWithMutationSuccess

enum CommerceOrderParticipantEnum {
  # Participant on the buyer side
  BUYER

  # Participant on the seller side
  SELLER
}

# Represents either a partner or a user
union CommerceOrderPartyUnion = CommercePartner | CommerceUser

enum CommerceOrderStateEnum {
  # order is abandoned by buyer and never submitted
  ABANDONED

  # order is approved by seller
  APPROVED

  # order is canceled
  CANCELED

  # order is fulfilled by seller
  FULFILLED

  # order is still pending submission by buyer
  PENDING

  # order is refunded after being approved or fulfilled
  REFUNDED

  # order is submitted by buyer
  SUBMITTED
}

# An error response for changes to an order
type CommerceOrderWithMutationFailure {
  error: CommerceApplicationError!
}

# A successfully returned order type
type CommerceOrderWithMutationSuccess {
  order: CommerceOrder!
}

type CommercePageCursor {
  # first cursor on the page
  cursor: String!

  # is this the current page?
  isCurrent: Boolean!

  # page number out of totalPages
  page: Int!
}

type CommercePageCursors {
  around: [CommercePageCursor!]!

  # optional, may be included in field around
  first: CommercePageCursor

  # optional, may be included in field around
  last: CommercePageCursor
  previous: CommercePageCursor
}

# Information about pagination in a connection.
type CommercePageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type CommercePartner {
  id: String!
  type: String!
}

type CommercePickup {
  fulfillmentType: String!
}

# Autogenerated input type of RejectOrder
input CommerceRejectOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of RejectOrder
type CommerceRejectOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Represents either a shipping information or pickup
union CommerceRequestedFulfillmentUnion = CommercePickup | CommerceShip

# Autogenerated input type of SellerAcceptOffer
input CommerceSellerAcceptOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of SellerAcceptOffer
type CommerceSellerAcceptOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of SellerCounterOffer
input CommerceSellerCounterOfferInput {
  amountCents: Int!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of SellerCounterOffer
type CommerceSellerCounterOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of SellerRejectOffer
input CommerceSellerRejectOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
  rejectReason: CommerceCancelReasonTypeEnum
}

# Autogenerated return type of SellerRejectOffer
type CommerceSellerRejectOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of SetPayment
input CommerceSetPaymentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  creditCardId: String!
  id: ID!
}

# Autogenerated return type of SetPayment
type CommerceSetPaymentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of SetShipping
input CommerceSetShippingInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  fulfillmentType: CommerceOrderFulfillmentTypeEnum!
  id: ID!
  shipping: CommerceShippingAttributes
}

# Autogenerated return type of SetShipping
type CommerceSetShippingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

type CommerceShip {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String
  postalCode: String
  region: String
}

# Shipping information
input CommerceShippingAttributes {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String!
  postalCode: String
  region: String
}

# Autogenerated input type of SubmitOrder
input CommerceSubmitOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of SubmitOrder
type CommerceSubmitOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of SubmitOrderWithOffer
input CommerceSubmitOrderWithOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of SubmitOrderWithOffer
type CommerceSubmitOrderWithOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

# Autogenerated input type of SubmitPendingOffer
input CommerceSubmitPendingOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of SubmitPendingOffer
type CommerceSubmitPendingOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: CommerceOrderOrFailureUnion!
}

type CommerceUser {
  id: String!
}

type Mutation {
  commerceAddInitialOfferToOrder(input: CommerceAddInitialOfferToOrderInput!): CommerceAddInitialOfferToOrderPayload
  commerceApproveOrder(input: CommerceApproveOrderInput!): CommerceApproveOrderPayload
  commerceBuyerAcceptOffer(input: CommerceBuyerAcceptOfferInput!): CommerceBuyerAcceptOfferPayload
  commerceBuyerCounterOffer(input: CommerceBuyerCounterOfferInput!): CommerceBuyerCounterOfferPayload
  commerceBuyerRejectOffer(input: CommerceBuyerRejectOfferInput!): CommerceBuyerRejectOfferPayload
  commerceConfirmPickup(input: CommerceConfirmPickupInput!): CommerceConfirmPickupPayload
  commerceCreateOfferOrderWithArtwork(input: CommerceCreateOfferOrderWithArtworkInput!): CommerceCreateOfferOrderWithArtworkPayload
  commerceCreateOrderWithArtwork(input: CommerceCreateOrderWithArtworkInput!): CommerceCreateOrderWithArtworkPayload

  # Fulfill an order with one Fulfillment, it sets this fulfillment to each line item in order
  commerceFulfillAtOnce(input: CommerceFulfillAtOnceInput!): CommerceFulfillAtOncePayload
  commerceRejectOrder(input: CommerceRejectOrderInput!): CommerceRejectOrderPayload
  commerceSellerAcceptOffer(input: CommerceSellerAcceptOfferInput!): CommerceSellerAcceptOfferPayload
  commerceSellerCounterOffer(input: CommerceSellerCounterOfferInput!): CommerceSellerCounterOfferPayload
  commerceSellerRejectOffer(input: CommerceSellerRejectOfferInput!): CommerceSellerRejectOfferPayload
  commerceSetPayment(input: CommerceSetPaymentInput!): CommerceSetPaymentPayload
  commerceSetShipping(input: CommerceSetShippingInput!): CommerceSetShippingPayload
  commerceSubmitOrder(input: CommerceSubmitOrderInput!): CommerceSubmitOrderPayload
  commerceSubmitOrderWithOffer(input: CommerceSubmitOrderWithOfferInput!): CommerceSubmitOrderWithOfferPayload
  commerceSubmitPendingOffer(input: CommerceSubmitPendingOfferInput!): CommerceSubmitPendingOfferPayload
}

type Query {
  commerceLineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    artworkId: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    editionSetId: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderStates: [CommerceOrderStateEnum!]
  ): CommerceLineItemConnection

  # Find an order by ID
  commerceOrder(code: String, id: ID): CommerceOrder

  # Find list of orders
  commerceOrders(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    buyerId: String
    buyerType: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    mode: CommerceOrderModeEnum
    sellerId: String
    sellerType: String
    sort: CommerceOrderConnectionSortEnum
    state: CommerceOrderStateEnum
  ): CommerceOrderConnectionWithTotalCount
}
"
`;
