// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creates an SDL 1`] = `
"type DoNotUseThisPartner {
  displayName: String
  display_name: String @deprecated(reason: \\"Use displayName\\")
  givenName: String
  given_name: String @deprecated(reason: \\"Use givenName\\")
  id: ID!
  relativeSize: Int
  relative_size: Int @deprecated(reason: \\"Use relativeSize\\")
  slug: String
  subscriptionState: String
  subscription_state: String @deprecated(reason: \\"Use subscriptionState\\")
}

type Mutation {
  recordArtworkView(input: RecordArtworkViewInput!): RecordArtworkViewPayload
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  # Autocomplete resolvers.
  _unused_gravity_matchPartners(matchType: String, page: Int = 1, size: Int = 5, term: String!): [DoNotUseThisPartner!]

  # Autocomplete resolvers.
  _unused_gravity_match_partners(match_type: String, page: Int = 1, size: Int = 5, term: String!): [DoNotUseThisPartner!] @deprecated(reason: \\"Use matchPartners\\")

  # Find partners by IDs
  _unused_gravity_partners(ids: [ID!]!): [DoNotUseThisPartner!]
}

# Autogenerated input type of RecordArtworkView
input RecordArtworkViewInput {
  artwork_id: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RecordArtworkView
type RecordArtworkViewPayload {
  # Id of viewed artwork
  artworkId: String!

  # Id of viewed artwork
  artwork_id: String! @deprecated(reason: \\"Use artworkId\\")

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}
"
`;
